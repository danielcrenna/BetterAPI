@page "/create"

@using Microsoft.AspNetCore.Components.Rendering
@using Blowdart.UI
@using Blowdart.UI.Blazor
@using ITypeResolver = BetterAPI.ITypeResolver

@inject HttpClient Http
@inject ITypeResolver TypeResolver

<h1>Editor</h1>
<hr />

@if (_format == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <form>
            @RenderEditor(_format)

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </form>
    </div>
}

@code {
    private ResourceFormat _format;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<One<ResourceFormat>>("v1/weatherforecasts/format");
        _format = response?.Value;

        // See: https://docs.microsoft.com/en-us/aspnet/core/blazor/webassembly-lazy-load-assemblies?view=aspnetcore-5.0
        // See: https://www.oqtane.org/Resources/Blog/PostId/523/assembly-loading-in-blazor-and-net-core
        if (_format?.Type != null)
        {
            var type = TypeResolver.FindByFullName(_format.Type);
            if (type != null)
            {
                Console.WriteLine("Type is " + type.FullName);
            }
        }

    }

    public RenderFragment RenderEditor(ResourceFormat format) => b =>
    {
        var nextIdHash = new Value128();

        b.BeginH4();
        b.BeginSpan();
        b.AddContent(format.Name);
        b.EndSpan();
        b.BeginSpan();
        b.AddContent(" ");
        b.BeginEm();
        b.AddContent($"(v{format.Version?.DisplayName})");
        b.EndEm();
        b.EndSpan();
        b.EndH4();

        b.hr();

        foreach (var field in format.Fields)
        {
            RenderInput(b, ref nextIdHash, format, field);
        }
    };

    private static void RenderInput(RenderTreeBuilder b, ref Value128 nextIdHash, ResourceFormat format, ResourceField field)
    {
        var id = Ids.NextId(ref nextIdHash, $"{format.Name}.{field.Name}");

        b.BeginDiv();
        b.AddAttribute("class", "form-group");

        if (!field.IsHidden)
        {
            b.BeginLabel();
            b.AddAttribute("for", id);
            b.AddContent(field.Name);
            b.EndLabel();
        }

        if (field.Type == "enum")
        {
            b.BeginSelect();
            b.AddAttribute("id", id);
            b.AddAttribute("class", "form-control");

            if (field.IsReadOnly)
                b.AddAttribute("readonly", true);

            foreach (var option in field.Options)
            {
                b.BeginOption();
                b.AddContent(option);
                b.EndOption();
            }
            b.EndSelect();
        }
        else
        {
            b.BeginInput();
            b.AddAttribute("id", id);
            b.AddAttribute("class", "form-control");

            switch (field.Type?.ToLowerInvariant())
            {
                case "int16":
                case "int32":
                case "int64":
                case "uint16":
                case "uint32":
                case "uint64":
                    // See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number
                    b.AddAttribute("type", "number");
                    break;

                case "single":
                case "double":
                case "decimal":
                    b.AddAttribute("type", "number");
                    b.AddAttribute("step", "0.1");
                    break;

                default:
                    if (field.IsHidden)
                        b.AddAttribute("type", "hidden");
                    else
                    {
                        if (!string.IsNullOrWhiteSpace(field.PolicyName))
                            b.AddAttribute("type", "password");
                        else
                            b.AddAttribute("type", "text");
                    }
                    break;
            }

            if (field.IsReadOnly)
                b.AddAttribute("readonly", true);

            if (!string.IsNullOrWhiteSpace(field.Prompt))
                b.AddAttribute("placeholder", field.Prompt);

            b.EndInput();
        }

        b.EndDiv();
    }

}
