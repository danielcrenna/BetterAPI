@page "/create"

@using Blowdart.UI
@using Blowdart.UI.Blazor
@using System.Reflection
@using BetterAPI.Reflection
@using Value128 = Blowdart.UI.Value128
@using Blowdart.UI.Blazor.Components
@using Microsoft.AspNetCore.Components.Rendering

@inject HttpClient Http

<h1>Editor</h1>
<hr />

@if (_format == null || _model == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <EditForm Model="@_model">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @RenderEditor(_format)

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </EditForm>
    </div>
}

@code {
    private ResourceFormat? _format;
    private readonly Dictionary<string, Assembly> _assemblies = new Dictionary<string, Assembly>();
    private object _model;
    private ITypeReadAccessor _reader;
    private ITypeWriteAccessor _writer;
    private AccessorMembers _members;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<One<ResourceFormat>>("v1/weatherforecasts/format");
        _format = response?.Value;

        if (!string.IsNullOrWhiteSpace(_format?.Type) &&
            !string.IsNullOrWhiteSpace(_format?.AssemblyName) &&
            !_assemblies.ContainsKey(_format?.AssemblyName ?? throw new NullReferenceException()))
        {
            var assemblyName = _format?.AssemblyName ?? throw new NullReferenceException();

            var buffer = await Http.GetByteArrayAsync("v1/weatherforecasts/format/" + assemblyName);
            var assembly = Assembly.Load(buffer);
            _assemblies.Add(assemblyName, assembly);

            var type = FindTypeByFullName(assembly, _format?.Type ?? throw new NullReferenceException());
            if (type != null)
            {
                Console.WriteLine("Type found was " + type.FullName);
                _model = Activator.CreateInstance(type) ?? throw new NullReferenceException();
                _reader = ReadAccessor.Create(type, AccessorMemberTypes.Properties, AccessorMemberScope.Public, out _members);
                _writer = WriteAccessor.Create(type, AccessorMemberTypes.Properties, AccessorMemberScope.Public);
            }
        }
    }

    public RenderFragment RenderEditor(ResourceFormat format) => b =>
    {
        var nextIdHash = new Value128();

        b.BeginH4();
        b.BeginSpan();
        b.AddContent(format.Name);
        b.EndSpan();
        b.BeginSpan();
        b.AddContent(" ");
        b.BeginEm();
        b.AddContent($"(v{format.Version?.DisplayName})");
        b.EndEm();
        b.EndSpan();
        b.EndH4();

        b.hr();

        var form = new FormModel
        {
            Name = format.Name,
            Fields = new List<FieldModel>(format.Fields.Select(x => new FieldModel
            {
                IsHidden = x.IsHidden,
                IsProtected = !string.IsNullOrWhiteSpace(x.PolicyName),
                IsReadOnly = x.IsReadOnly,
                Name = x.Name,
                Options = x.Options,
                Prompt = x.Prompt,
                Type = x.Type
            }))
        };

        foreach (var field in form.Fields)
        {
            b.FormField(_model, form, field, ref nextIdHash);
        }
    };
    
    public Type FindTypeByFullName(Assembly assembly, string typeFullName)
    {
        foreach (var type in assembly.GetTypes())
            if (type.FullName != null && type.FullName.Equals(typeFullName, StringComparison.OrdinalIgnoreCase))
                return type;

        return default;
    }
}
